name: "Publish Windows Release"

on:
  push:
    branches:
      - master

jobs:
  publish-tauri:
    permissions:
      contents: write
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Debug environment
        shell: bash  # Add this line to explicitly use bash
        run: |
          echo "Checking environment variables..."
          if [[ -n "$TAURI_SIGNING_PRIVATE_KEY" ]]; then
            echo "TAURI_SIGNING_PRIVATE_KEY is set"
          else
            echo "TAURI_SIGNING_PRIVATE_KEY is NOT set"
          fi
          if [[ -n "$TAURI_KEY_PASSWORD" ]]; then
            echo "TAURI_KEY_PASSWORD is set"
          else
            echo "TAURI_KEY_PASSWORD is NOT set"
          fi
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: latest
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          STORE_PATH=$(pnpm store path --silent)
          echo "STORE_PATH=${STORE_PATH}" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Install frontend dependencies
        run: pnpm install
       
      - name: Synchronize versions
        run: node scripts/sync-version.cjs

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
        with:
          tagName: v__VERSION__
          releaseName: "GSX Profile Manager v__VERSION__"
          update: true
          releaseBody: |
            ## GSX Profile Manager v__VERSION__
            
            ### Installation
            - Download the Windows installer
            - Run the installer and follow the instructions
            - Once installed, open GSX Profile Manager from your Start menu
            
            ### Changes in this version
            - See commit history for details
          releaseDraft: false
          prerelease: false

      - name: Generate latest.json
        shell: bash
        run: |
          # Get version from package.json
          VERSION=$(node -p "require('./package.json').version")
          CURRENT_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          
          # Read signature file
          SIGNATURE=$(cat src-tauri/target/release/bundle/nsis/GSX\ Profile\ Manager_${VERSION}_x64-setup.exe.sig)
          
          # Create latest.json
          echo '{
            "version": "'$VERSION'",
            "notes": "See the assets to download this version and install.",
            "pub_date": "'$CURRENT_DATE'",
            "platforms": {
              "windows-x86_64": {
                "signature": "'$SIGNATURE'",
                "url": "https://github.com/grtn91/gsx-profile-manager/releases/download/v'$VERSION'/GSX%20Profile%20Manager_'$VERSION'_x64-setup.exe"
              }
            }
          }' > latest.json
          
          # Print the content for verification in logs
          cat latest.json
        
      - name: Upload latest.json to release
        uses: softprops/action-gh-release@v1
        with:
          files: latest.json
          tag_name: v${{ env.VERSION }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}